package bsu.rfe.java.group7.lab6.Ryndin.var;

import java.awt.LayoutManager;


import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionListener;
import java.util.ArrayList;
import javax.swing.JPanel;
import javax.swing.Timer;
@SuppressWarnings("serial")
public class Field extends JPanel
{
	// Флаг приостановленности движения
	private boolean paused;
	private boolean MouseClick;
	// Динамический список скачущих мячей
	private ArrayList<BouncingBall> balls = new ArrayList<BouncingBall>(10);
	// Класс таймер отвечает за регулярную генерацию событий ActionEvent
	// При создании его экземпляра используется анонимный класс, 
	// реализующий интерфейс ActionListener
	private Timer repaintTimer = new Timer(10, new ActionListener() 
	{
		public void actionPerformed(ActionEvent ev) 
		{
		// Задача обработчика события ActionEvent - перерисовка окна
		repaint();
		}
	});
	
	public class MouseHandler extends MouseAdapter 
	{
		
		int Mouse_x = 0,Mouse_y = 0,i = 0;
		long TimeClicked = 0,TimeReleased = 0;
		
		
		public void mouseClicked(MouseEvent Event1) 
		{
			
			 ///just nothing....	
		}
	    
	    public void mousePressed(MouseEvent Event2) 
	    {
	    	System.out.print ("MousePressed2");
			Mouse_x = Event2.getX();
			Mouse_y = Event2.getY();
			for (BouncingBall ball: balls)
			{
				if(ball.CheckDistance(Mouse_x, Mouse_y)) 
				{
					pause();break;
				}
			}
			TimeClicked = System.currentTimeMillis();
			
	    }
	    
	    public void mouseReleased(MouseEvent Event3) 
	    {
	    	///на случай если пользователь отпустит мышку слишком рано 
	    	///(10 число - около 100мс время реакции человека)
	    	TimeReleased = System.currentTimeMillis();
	    	double time = 0;
	    	time = TimeReleased - TimeClicked;
	    	if(time >= 100 )
	    	{
		    	System.out.print ("MouseReleased3");
		    	int X_end,Y_end,speed1;
		    	double R,Cos,Sin;
		    	X_end = Event3.getX();
		    	Y_end = Event3.getY();
		    	R = Math.sqrt((X_end-Mouse_x)*(X_end-Mouse_x)+(Y_end-Mouse_y)*(Y_end-Mouse_y));
		    	if(R < 0.1) {R = 0.1;}
		    	speed1 = (int)(time/R);
		    	Cos = (X_end-Mouse_x)/R;
		    	Sin = (Y_end-Mouse_y)/R;
		    	
		    	ActivateClick(Mouse_x,Mouse_y,Cos,Sin,speed1);
		    	//CurrentBall.SetDirection((X_end-Mouse_x)/R,(Y_end-Mouse_y)/R);
		    	//CurrentBall.SetSpeed(time /(int)(R));
	    	}
	    	///Вне зависимости от времени включить перемещение
	    	resume();
	    }
	  }
	  
	  /*
	  public class MouseMotionHandler implements MouseMotionListener 
	  {
		  
	    public void mouseMoved(MouseEvent Event4) 
	    {
	         ///just nothing....
	    }
	    
	    public void mouseDragged(MouseEvent Event5) 
	    {
	    	///just nothing....
	    		
	    }
	  }
	  */
	// Конструктор класса BouncingBall
	public Field() 
	{
		// Установить цвет заднего фона белым
		setBackground(Color.WHITE);
	    addMouseListener(new MouseHandler());
	    // addMouseMotionListener(new MouseMotionHandler());
		// Запустить таймер
		repaintTimer.start();
	}
	// Унаследованный от JPanel метод перерисовки компонента
	public void paintComponent(Graphics g) 
	{
		// Вызвать версию метода, унаследованную от предка
		super.paintComponent(g);
		Graphics2D canvas = (Graphics2D) g;
		// Последовательно запросить прорисовку от всех мячей из списка
		for (BouncingBall ball: balls)
		{
		ball.paint(canvas);
		}
	}
	// Метод добавления нового мяча в список
	public void addBall() 
	{
		//Заключается в добавлении в список нового экземпляра BouncingBall
		// Всю инициализацию положения, скорости, размера, цвета 
		// BouncingBall выполняет сам в конструкторе
		balls.add(new BouncingBall(this));
	}
	// Метод синхронизированный, т.е. только один поток может 
	// одновременно быть внутри
	public synchronized void pause() 
	{
		// Включить режим паузы
		paused = true;
	}
	// Метод синхронизированный, т.е. только один поток может 
	// одновременно быть внутри
	public synchronized void resume() 
	{
		// Выключить режим паузы
		paused = false;
		// Будим все ожидающие продолжения потоки
		notifyAll();
	}
	
	public void ActivateClick(int Mouse_x,int Mouse_y,double cos,double sin,int speed)
	{
		double R;
		for (BouncingBall ball: balls)
		{
			if(ball.CheckDistance(Mouse_x, Mouse_y)) 
			{
				ball.SetDirection(3*cos,3*sin);
				ball.SetSpeed(speed);
			}
		}
	}
	
	
	// Синхронизированный метод проверки, может ли мяч двигаться 
	// (не включен ли режим паузы?)
	public synchronized void canMove(BouncingBall ball) throws
	InterruptedException 
	{
		if (paused) 
		{
			// Если режим паузы включен, то поток, зашедший 
			// внутрь данного метода, засыпает
			wait();
		}
	}
}
