package bsu.rfe.java.group7.lab7.Ryndin.var1;

import java.awt.Color;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.UnknownHostException;

import javax.swing.JOptionPane;
//InetSocketAddress

public class ServerUser implements Runnable 
{
	
	private String InitServer_IpAdress;//IP адрес сервера-входа
	private int InitServer_Port;//порт сервера-входа
	private int User_Server_Port;//порт данного сервера
	private int User_Port = 4567;//порт пользователя стоит по умолчанию
	
	///авторизованные пользователи
	private int HowMany;
	private String[] IpAdress;
	private String[] NameUsers;
	private String[] SurnameUsers;
	

	// Конструктор класса BouncingBall
	public ServerUser(int Port_A,String IPServer,int Port_B) 
	{
		User_Server_Port = Port_A;
		InitServer_IpAdress = IPServer;
		InitServer_Port = Port_B;
		HowMany = 1;///тестовый вариант
		IpAdress = new String[1];
		NameUsers= new String[1];
		SurnameUsers= new String[1];
		IpAdress[0] = new String("127.0.0.1");
		NameUsers[0] = new String("ABC");
		SurnameUsers[0] = new String("CBA");
		
		
		
		
		Thread thisThread = new Thread(this);
		// Запускаем поток
		thisThread.start();
	}
	// Метод run() исполняется внутри потока. Когда он завершает работу, 
	// то завершается и поток
	public void run() 
	{
		try 
		{
			// Крутим бесконечный цикл, т.е. пока нас не прервут, 
			// мы не намерены завершаться
			while(true) 
			{
				final ServerSocket ServerSocket = new ServerSocket(User_Server_Port);
				try 
				{
					
					while (!Thread.interrupted()) 
					{
						
						
						Socket UserSocket = ServerSocket.accept();
						int i = 0;
						boolean Equal = false;
						try {
							    System.out.println("Server has got some new access...");
								///принимаем соединение только когда IP совпадает и порт
								String address = ((InetSocketAddress) UserSocket.getRemoteSocketAddress()).getAddress().getHostAddress();
								int Port = UserSocket.getLocalPort();
								System.out.println("IP");
								System.out.println(address);
								System.out.println("Port");
								System.out.println(Port);
								
								System.out.println("getRemoteSocketAddress()");
								System.out.println((InetSocketAddress) UserSocket.getRemoteSocketAddress());
								System.out.println(".getRemoteSocketAddress()).getAddress()");
								System.out.println(((InetSocketAddress) UserSocket.getRemoteSocketAddress()).getAddress());
								
								
								
								/// И сервер и пользователи стучатся в один сокет
								Equal = InitServer_IpAdress.equals(address) && (InitServer_Port == Port);
								///К нам стучит сервер входа - очередной пользователь добавился - принять соединение
								if(Equal)
								{
									 System.out.println("add new user");
									final DataInputStream in = new DataInputStream(UserSocket.getInputStream());
									String IP = in.readUTF();
									String Name = in.readUTF();
									String Surname = in.readUTF();
									AddUser(IP,Name,Surname);
									/*
									///теперь стучимся в сервер входа - нужно сообщить, что все хорошо
									final DataOutputStream out = new DataOutputStream(UserSocket.getOutputStream());
									out.writeUTF("True");
									*/
									
									
									
									///обязательно закрываем соединение
									UserSocket.close();
									String ServerName = new String("ChatServer");
									String InviteMessage = new String ("You are invited for server \n Port: "+ String.valueOf(User_Server_Port));
									SendMessageUser(IP,ServerName,ServerName, InviteMessage);
									
								}
								///Либо стучится пользователь либо кто-то еще
								else 
								{   
									///стучится пользователь
									if(Port == User_Port)
									{
										i = 0;
										Equal = IpAdress[i].equals(address);
										System.out.println("Try to define user...");
										System.out.println(address);
										while(!Equal && i < (HowMany-1) )
										{
											i = i+1;
											Equal = IpAdress[i].equals(address);
										}
										///все хорошо Ip адрес найден среди списка - принять соединение
										/// Если нет - игнорируем соединение и переходим к следующему в очереди
										if (Equal) 
										{
											System.out.println("User defined");
											final DataInputStream in = new DataInputStream(UserSocket.getInputStream());
											String SomeMessage = in.readUTF();
											///Приняли сообщение - закрыли сокет
											
											UserSocket.close();
											///далее самое важное отослать сообщение всем в чат
											for(i = 0;i < HowMany;i++)
											{
												SendMessageUser(IpAdress[i],NameUsers[i],SurnameUsers[i], SomeMessage);
											}
										}
										///к нам стучится пользователь, которого нет в базе данных
										else 
										{
											///just ignore user
											System.out.println("Permission denied...");
										}
									}
									///к нам стучится кто-то, кого мы не знаем
									else 
									{
										//just ignore unknown contact
										System.out.println("Unknown Contact detected...");
										
									}
								}
								
							
						     }
						     finally
						     {
							       UserSocket.close();
						     }
						
					}
				} 
				finally
				{
					ServerSocket.close();
				}	
				///Можно убрать
				Thread.sleep(100);
			}
		} 
		catch (InterruptedException | IOException ex) 
		{
			// Если нас прервали, то ничего не делаем 
			// и просто выходим (завершаемся)
		}
		
	}
	public void AddUser(String Ip,String Name,String Surname)
	{
		
		System.out.println("Function for add user is launched");
		String[] IpAdress_old;
		String[] NameUsers_old;
		String[] SurnameUsers_old;
		///присвоение ссылок
		IpAdress_old = IpAdress;
		NameUsers_old =  NameUsers;
		SurnameUsers_old = SurnameUsers;
		
		///увеличение размеров
		IpAdress = new String[HowMany+1];
		NameUsers = new String[HowMany+1];
		SurnameUsers = new String[HowMany+1];
		///копирование
		for(int i = 0;i < HowMany;i++)
		{
			IpAdress[i] = new String (IpAdress_old[i]);
			NameUsers[i] = new String (NameUsers_old[i]);
			SurnameUsers[i] = new String (SurnameUsers_old[i]);
		}
		///добавление нового
		IpAdress[HowMany] = new String(Ip);
		NameUsers[HowMany] = new String(Name);
		SurnameUsers[HowMany] = new String(Surname);
		///не забываем обновить счетчик
		HowMany = HowMany+1;
		
		System.out.println("New User data");
		System.out.println(IpAdress[HowMany-1]);
		System.out.println(NameUsers[HowMany-1]);
		System.out.println(SurnameUsers[HowMany-1]);
		System.out.println(HowMany);
		
	}
	public void SendMessageUser(String Ip,String Name,String Surname,String message)
	{
		try 
		{
	     final Socket socket = new Socket(Ip, User_Port);
		 // Открываем поток вывода данных
		 final DataOutputStream out = new DataOutputStream(socket.getOutputStream());
		 // Записываем в данные
		 out.writeUTF(Name);
		 out.writeUTF(Surname);
		 out.writeUTF(message);
		 // Закрываем сокет
		 socket.close();
		}
		catch (UnknownHostException e) 
		{
			e.printStackTrace();
			
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
			
		}
		
	}
	
}












