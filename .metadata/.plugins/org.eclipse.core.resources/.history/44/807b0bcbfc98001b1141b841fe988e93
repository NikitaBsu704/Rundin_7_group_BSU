package bsu.rfe.java.group7.lab7.Ryndin.var1;

import java.awt.Color;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.UnknownHostException;

import javax.swing.JOptionPane;


public class ServerUser2 implements Runnable 
{
	
	
	private int User_Port = 4567;
	private int This_Server_Port;
	///авторизованные пользователи
	private String MainIp;
	private int Main_Server_Port;
	private String[] IpAdress;
	private String[] NameUsers;
	private String[] SurnameUsers;
	

	//  онструктор класса BouncingBall
	public ServerUser2(String IPServer,int Port_A,int Port_B,String[] IP,String[] User1 ,String[] User2) 
	{
		MainIp = new String(IPServer);
		This_Server_Port = Port_B;
		IpAdress = IP;
		NameUsers = User1;
		SurnameUsers = User2;
		
		
		Thread thisThread = new Thread(this);
		// «апускаем поток
		thisThread.start();
	}
	// ћетод run() исполн€етс€ внутри потока.  огда он завершает работу, 
	// то завершаетс€ и поток
	public void run() 
	{
		try 
		{
			//  рутим бесконечный цикл, т.е. пока нас не прервут, 
			// мы не намерены завершатьс€
			while(true) 
			{
				final ServerSocket ServerSocket = new ServerSocket(This_Server_Port);
				try 
				{
					
					while (!Thread.interrupted()) 
					{
						
						
						Socket MainSocket = ServerSocket.accept();
						int i = 0;
						boolean Equal = false;
						try {
							    System.out.println("Server2 has got some new access...");
								///принимаем соединение только когда IP совпадает
								String address = ((InetSocketAddress) MainSocket.getRemoteSocketAddress()).getAddress().getHostAddress();
								System.out.println("IP");
								System.out.println(address);
								
								////на данный момент € реализовал вход через одну точку
								/// » сервер и пользователи стучатс€ в один сокет
								Equal = address.equals(MainIp);
								///  нам стучит сервер входа - очередной пользователь добавилс€
								if(Equal)
								{
									final DataInputStream in = new DataInputStream(MainSocket.getInputStream());
									String IP = in.readUTF();
									String Name = in.readUTF();
									String Surname = in.readUTF();
									AddUser(IP,Name,Surname);
									/*
									///теперь стучимс€ в сервер входа - нужно сообщить, что все хорошо
									final DataOutputStream out = new DataOutputStream(UserSocket.getOutputStream());
									out.writeUTF("True");
									*/
									
									
									
									///об€зательно закрываем соединение
									MainSocket.close();
									String ServerName = new String("ChatServer");
									String InviteMessage = new String ("You are invited for server \n Port: "+ String.valueOf(This_Server_Port));
									SendMessageUser(IP,ServerName,ServerName, InviteMessage);
									
								}
								
								
							
						     }
						     finally
						     {
							       UserSocket.close();
						     }			
					}
				} 
				finally
				{
					ServerSocket.close();
				}	
				///ћожно убрать
				Thread.sleep(100);
			}
		} 
		catch (InterruptedException | IOException ex) 
		{
			// ≈сли нас прервали, то ничего не делаем 
			// и просто выходим (завершаемс€)
		}
		
	}
	public void AddUser(String Ip,String Name,String Surname)
	{
		
		System.out.println("Function for add user is launched");
		String[] IpAdress_old;
		String[] NameUsers_old;
		String[] SurnameUsers_old;
		///присвоение ссылок
		IpAdress_old = IpAdress;
		NameUsers_old =  NameUsers;
		SurnameUsers_old = SurnameUsers;
		int HowMany = IpAdress_old.length();
		
		///увеличение размеров
		IpAdress = new String[HowMany+1];
		NameUsers = new String[HowMany+1];
		SurnameUsers = new String[HowMany+1];
		///копирование
		for(int i = 0;i < HowMany;i++)
		{
			IpAdress[i] = new String (IpAdress_old[i]);
			NameUsers[i] = new String (NameUsers_old[i]);
			SurnameUsers[i] = new String (SurnameUsers_old[i]);
		}
		///добавление нового
		IpAdress[HowMany] = new String(Ip);
		NameUsers[HowMany] = new String(Name);
		SurnameUsers[HowMany] = new String(Surname);
		///не забываем обновить счетчик
		HowMany = HowMany+1;
		
		System.out.println("New User data");
		System.out.println(IpAdress[HowMany-1]);
		System.out.println(NameUsers[HowMany-1]);
		System.out.println(SurnameUsers[HowMany-1]);
		System.out.println(HowMany);
		
	}
	
	public void SendMessageUser(String Ip,String Name,String Surname,String message)
	{
		try 
		{
	     final Socket socket = new Socket(Ip, User_Port);
		 // ќткрываем поток вывода данных
		 final DataOutputStream out = new DataOutputStream(socket.getOutputStream());
		 // «аписываем в данные
		 out.writeUTF(Name);
		 out.writeUTF(Surname);
		 out.writeUTF(message);
		 // «акрываем сокет
		 socket.close();
		}
		catch (UnknownHostException e) 
		{
			e.printStackTrace();
			
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
			
		}
	}
	
	
	
	
	// ћетод прорисовки самого себ€
	
}
