package bsu.rfe.java.group7.lab7.Ryndin.var1;

import java.awt.Color;
import java.io.DataInputStream;
import java.io.IOException;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.ServerSocket;
import java.net.Socket;

import javax.swing.JOptionPane;


public class ServerUser implements Runnable 
{
	///
	private int This_Server_Port;
	private int User_Port;
	private String InitServer_IpAdress;
	
	///авторизованные пользователи
	private int HowMany;
	private String[] IpAdress;
	private String[] NameUsers;
	private String[] SurnameUsers;
	

	// Конструктор класса BouncingBall
	public ServerUser(int Port_A,int Port_B,String IPServer) 
	{
		This_Server_Port = Port_A;
		User_Port = Port_B;
		InitServer_IpAdress = IPServer;
		HowMany = 0;///изначально никого нет
		
		
		Thread thisThread = new Thread(this);
		// Запускаем поток
		thisThread.start();
	}
	// Метод run() исполняется внутри потока. Когда он завершает работу, 
	// то завершается и поток
	public void run() 
	{
		try 
		{
			// Крутим бесконечный цикл, т.е. пока нас не прервут, 
			// мы не намерены завершаться
			while(true) 
			{
				final ServerSocket AuthorisationSocket = new ServerSocket(This_Server_Port);
				try 
				{
					
					while (!Thread.interrupted()) 
					{
						
						Socket UserSocket = AuthorisationSocket.accept();
						int i = 0;
						boolean Equal = false;
						try {
								///принимаем соединение только когда IP совпадает
								String address = ((InetSocketAddress) UserSocket.getRemoteSocketAddress()).getAddress().getHostAddress();
								
								
								////на данный момент я реализовал вход через одну точку
								/// И сервер и пользователи стучатся в один сокет
								Equal = InitServer_IpAdress.equals(address);
								///К нам стучит сервер входа - очередной пользователь добавился
								if(Equal)
								{
									final DataInputStream in = new DataInputStream(UserSocket.getInputStream());
									String IP = in.readUTF();
									String Name = in.readUTF();
									String Surname = in.readUTF();
									AddUser(IP,Name,Surname);
									
								}
								
								
								i = 0;
								Equal = IpAdress[i].equals(address);
								while(!Equal && i < (HowMany-1) )
								{
									i = i+1;
									Equal = IpAdress[i].equals(address);
								}
								///все хорошо Ip адрес найден среди списка - принять соединение
								/// Если нет - игнорируем соединение и переходим к следующему в очереди
								if (Equal) 
								{
									final DataInputStream in = new DataInputStream(UserSocket.getInputStream());
									String SomeMessage = in.readUTF();
									
									
								}
								
								
							
						     }
						     finally
						     {
							       UserSocket.close();
						     }			
					}
				} 
				finally
				{
					AuthorisationSocket.close();
				}	
				///Можно убрать
				Thread.sleep(100);
			}
		} 
		catch (InterruptedException | IOException ex) 
		{
			// Если нас прервали, то ничего не делаем 
			// и просто выходим (завершаемся)
		}
		
	}
	public void AddUser(String Ip,String Name,String Surname)
	{
		String[] IpAdress_old;
		String[] NameUsers_old;
		String[] SurnameUsers_old;
		///присвоение ссылок
		IpAdress_old = IpAdress;
		NameUsers_old =  NameUsers;
		SurnameUsers_old = SurnameUsers;
		
		///увеличение размеров
		IpAdress = new String[HowMany+1];
		NameUsers = new String[HowMany+1];
		SurnameUsers = new String[HowMany+1];
		///копирование
		for(int i = 0;i < HowMany;i++)
		{
			IpAdress[i] = IpAdress_old[i];
			NameUsers[i] = NameUsers_old[i];
			SurnameUsers[i] = SurnameUsers_old[i];
		}
		///добавление нового
		IpAdress[HowMany] = new String(Ip);
		NameUsers[HowMany] = new String(Name);
		SurnameUsers[HowMany] = new String(Surname);
		///не забываем обновить счетчик
		HowMany = HowMany+1;
		
	}
	
	
	
	// Метод прорисовки самого себя
	
}












