package bsu.rfe.java.group7.lab7.Ryndin.var1;


//Импортируются классы, используемые в приложении
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.ButtonGroup;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JTextField;
@SuppressWarnings("serial")
//Главный класс приложения, он же класс фрейма
public class InitFrame extends JFrame 
{
	
	private static final int WIDTH = 400;
	private static final int HEIGHT = 400;
	private JTextField FormulaPicture;
	private JTextField textFieldX;
	private JTextField textFieldY;
	private JTextField textFieldZ;
	// Текстовое поле для отображения результата,
	// как компонент, совместно используемый в различных методах
	private JTextField textFieldResult;
	private JTextField MemoryDisplay;
	// Группа радио-кнопок для обеспечения уникальности выделения в группе
	private ButtonGroup radioButtons = new ButtonGroup();
	// Контейнер для отображения радио-кнопок
	private Box hboxFormulaType = Box.createHorizontalBox();
	private int formulaId = 1;
	Box hboxMemory = Box.createHorizontalBox();
	private double mem1 = 0;
	private double mem2 = 0;
	private double mem3 = 0;
	private int memoryId = 1;
	/*
	private Box RequestBox = Box.createHorizontalBox();
	private Box AuthorizationBox = Box.createHorizontalBox();
	private JTextField AdressField;
	private JTextField UserName;
	private JTextField UserSurname;
	private JTextField KeyWord;
	private ButtonGroup AllButtons = new ButtonGroup();
	*/
	
	//данный метод ставит id в соответствие картинку
	private void updateDisplay(final int formulaId)
	{
		 if (formulaId==1)
		 { FormulaPicture.setText("U = X+Y+Z");}
		 else
		 {
			 if(formulaId==2) {FormulaPicture.setText("U = X*X+Y*Y+Z*Z");}
			 else
			 {FormulaPicture.setText("U = (X+Y+Z)^2");}
		 }
	}
	
	// Вспомогательный метод для добавления кнопок на панель
	private void addRadioButton(String buttonName, final int formulaId) 
	{
		JRadioButton button = new JRadioButton(buttonName);
		button.addActionListener(new ActionListener() 
		{
			public void actionPerformed(ActionEvent ev) 
			{
				InitFrame.this.formulaId = formulaId;
			      updateDisplay(formulaId);
	        }
	    });
	radioButtons.add(button);
	hboxFormulaType.add(button);
	}
	
	private void addMemoryButton(String buttonName, final int memoryId) 
	{
		JRadioButton button = new JRadioButton(buttonName);
		button.addActionListener(new ActionListener() 
		{
			public void actionPerformed(ActionEvent ev) 
			{
				double result = 0;
				InitFrame.this.memoryId = memoryId;
			    if (memoryId == 1) 
				   {result = mem1;}
				 else
				 {
					 if (memoryId == 2) 
					 {result = mem2;}
					 else
					 {result = mem3;} 
				 }
			     MemoryDisplay.setText( Double.toString(result) );
	        }
	    });
	radioButtons.add(button);
	hboxMemory.add(button);
	}
	
	public Double calculate1(Double x, Double y,Double z) 
	{
	   return x + y + z;
	}
	
	public Double calculate2(Double x, Double y,Double z) 
	{
		return x*x + y*y+z*z;
	}
	public Double calculate3(Double x, Double y,Double z) 
	{
		return (x+y+z)*(x+y+z);
	}
	
	
	
	public InitFrame() 
	{
		super("Вычисление формулы");
		setSize(WIDTH, HEIGHT);
		Toolkit kit = Toolkit.getDefaultToolkit();
		setLocation((kit.getScreenSize().width - WIDTH)/2,
		(kit.getScreenSize().height - HEIGHT) / 2);
		
		
		
		
		///Картинка для формулы
		FormulaPicture = new JTextField("NO Formula", 10);
		FormulaPicture.setMaximumSize(FormulaPicture.getPreferredSize());
		Box hboxFormulaDisplay = Box.createHorizontalBox();
		hboxFormulaDisplay.add(Box.createHorizontalGlue());
		hboxFormulaDisplay.add(FormulaPicture);
		hboxFormulaDisplay.add(Box.createHorizontalGlue());
		hboxFormulaDisplay.setBorder(BorderFactory.createLineBorder(Color.BLUE));
		
		
		
		hboxFormulaType.add(Box.createHorizontalGlue());
		addRadioButton("Формула 1", 1);
		addRadioButton("Формула 2", 2);
		addRadioButton("Формула 3", 3);
		radioButtons.setSelected(radioButtons.getElements().nextElement().getModel(), true);
		hboxFormulaType.add(Box.createHorizontalGlue());
		hboxFormulaType.setBorder(BorderFactory.createLineBorder(Color.YELLOW));
		
		
		//2 часть - ввод результата
		JLabel labelForX = new JLabel("X:");
		textFieldX = new JTextField("0", 10);
		textFieldX.setMaximumSize(textFieldX.getPreferredSize());
		JLabel labelForY = new JLabel("Y:");
		textFieldY = new JTextField("0", 10);
		textFieldY.setMaximumSize(textFieldY.getPreferredSize());
		JLabel labelForZ = new JLabel("Z:");
		textFieldZ = new JTextField("0", 10);
		textFieldZ.setMaximumSize(textFieldZ.getPreferredSize());
		
		Box hboxVariables = Box.createHorizontalBox();
		hboxVariables.add(labelForX);
		hboxVariables.add(textFieldX);
		
		
		
		hboxVariables.add(Box.createHorizontalGlue());
		
		
		
		hboxVariables.add(labelForY);
		hboxVariables.add(Box.createHorizontalStrut(10));
		hboxVariables.add(textFieldY);
		hboxVariables.add(Box.createHorizontalStrut(50));
		
		
		
		hboxVariables.add(Box.createHorizontalGlue());
		
		
		
		hboxVariables.add(labelForZ);
		hboxVariables.add(Box.createHorizontalStrut(10));
		hboxVariables.add(textFieldZ);
		hboxVariables.setBorder(BorderFactory.createLineBorder(Color.RED));
		
		
		
		//3 часть - вывод результата
		JLabel labelForResult1 = new JLabel("Память:");
		MemoryDisplay = new JTextField("0", 10);
		MemoryDisplay.setMaximumSize(MemoryDisplay.getPreferredSize());
		
		JLabel labelForResult2 = new JLabel("Результат:");
		textFieldResult = new JTextField("0", 10);
		textFieldResult.setMaximumSize(textFieldResult.getPreferredSize());
		
		
		
		Box hboxResult = Box.createHorizontalBox();
		hboxResult.add(Box.createHorizontalGlue());
		hboxResult.add(labelForResult1);
		hboxResult.add(Box.createHorizontalStrut(10));
		hboxResult.add(MemoryDisplay);
		hboxResult.add(Box.createHorizontalStrut(10));
		hboxResult.add(labelForResult2);
		hboxResult.add(Box.createHorizontalStrut(10));
		hboxResult.add(textFieldResult);
		hboxResult.add(Box.createHorizontalGlue());
		hboxResult.setBorder(BorderFactory.createLineBorder(Color.BLUE));
		
		
		
		
		
		JLabel labelForMemory = new JLabel("Запись:");
		hboxMemory.add(Box.createHorizontalGlue());
		hboxMemory.add(labelForMemory);
		hboxMemory.add(Box.createHorizontalStrut(10));
		addMemoryButton("Память1", 1);
		addMemoryButton("Память2", 2);
		addMemoryButton("Память3", 3);
		hboxMemory.add(Box.createHorizontalGlue());
		hboxMemory.setBorder(BorderFactory.createLineBorder(Color.BLACK));
		
		
		
		
		
		// сам процесс работы
		JButton buttonCalc = new JButton("вычисление");
		buttonCalc.addActionListener(new ActionListener() 
		{
			public void actionPerformed(ActionEvent ev) 
			{
				try 
				{
					 Double x = Double.parseDouble(textFieldX.getText());
					 Double y = Double.parseDouble(textFieldY.getText());
					 Double z = Double.parseDouble(textFieldZ.getText());
					 Double result = 0.0;
					 if (formulaId == 1)
					 {result = calculate1(x, y,z);}
					 else
				     {
						 if (formulaId == 1) {result = calculate2(x, y,z);}
						 else
						 {result = calculate3(x, y,z);}
					 }
					 textFieldResult.setText(result.toString());
				} 
				catch (NumberFormatException ex) 
				{
					JOptionPane.showMessageDialog(InitFrame.this,"Ошибка в формате записи числа с плавающей точкой", "Ошибочный формат числа",JOptionPane.WARNING_MESSAGE);
				}
			}
		});
		/*
		Icon icon = new ImageIcon("D:\\@images_for_eclipse\triangle_001.png");
		JButton button_Request = new JButton(icon);
		button_Request.setIcon        (new ImageIcon("D:\\@images_for_eclipse/triangle_001.png"));
		button_Request.setRolloverIcon(new ImageIcon("D:\\@images_for_eclipse/triangle_002.png"));
		button_Request.setPressedIcon (new ImageIcon("D:\\@images_for_eclipse/triangle_002.png"));
		button_Request.setDisabledIcon(new ImageIcon("D:\\@images_for_eclipse/triangle_001.png"));
		
		button_Request.addActionListener(new ActionListener() 
		{
			public void actionPerformed(ActionEvent ev) 
			{
				try 
				{
				     String destinationAddress = AdressField.getText();
					
				} 
				catch (NumberFormatException ex) 
				{
					JOptionPane.showMessageDialog(InitFrame.this,"Ошибка в формате записи адреса сервера", "Ошибочный формат числа",JOptionPane.WARNING_MESSAGE);
				}
			}
		});
		
		
		JButton button_send = new JButton("Отправить данные");
		buttonReset.addActionListener(new ActionListener() 
		{
			public void actionPerformed(ActionEvent ev) 
			{
				
				try 
				{
				     String destinationAddress = AdressField.getText();
				     String Name = UserName.getText();
				     String Surname = UserSurname.getText();
				     String Key = KeyWord.getText();
				     
					
				} 
				catch (NumberFormatException ex) 
				{
					JOptionPane.showMessageDialog(InitFrame.this,"Ошибка в формате записи адреса сервера", "Ошибочный формат числа",JOptionPane.WARNING_MESSAGE);
				}
				
		    }
		});
		
		*/
		
		//JButton button_Memory = new JButton("M++");
		Icon icon = new ImageIcon("D:\\@images_for_eclipse\triangle_001.png");
		JButton button_Memory = new JButton(icon);
		button_Memory.setIcon        (new ImageIcon("D:\\@images_for_eclipse/triangle_001.png"));
		button_Memory.setRolloverIcon(new ImageIcon("D:\\@images_for_eclipse/triangle_002.png"));
		button_Memory.setPressedIcon (new ImageIcon("D:\\@images_for_eclipse/triangle_002.png"));
		button_Memory.setDisabledIcon(new ImageIcon("D:\\@images_for_eclipse/triangle_001.png"));
		
		///button_Memory.setBorderPainted(false);
		///button_Memory.setFocusPainted(false);
		///button_Memory.setContentAreaFilled(false);
		
		
		button_Memory.addActionListener(new ActionListener() 
		{
			public void actionPerformed(ActionEvent ev) 
			{
				try 
				{
					 Double result = 0.0;
					 result =  Double.parseDouble(textFieldResult.getText());
					 if (memoryId == 1) 
					 {
						 mem1 = mem1+result;
						 result = mem1;
					 }
					 else
					 {
						 if (memoryId == 2) 
						 {
							 mem2 = mem2+result;
							 result = mem1;					 
						 }
						 else
						 {
							 mem3 = mem3+result;
							 result = mem3;						 
						 }
						 
					 }
					 MemoryDisplay.setText(result.toString());
				} 
				catch (NumberFormatException ex) 
				{
					JOptionPane.showMessageDialog(InitFrame.this,"Ошибка в формате записи числа с плавающей точкой", "Ошибочный формат числа",JOptionPane.WARNING_MESSAGE);
				}
			}
		});
		
		
		//4 часть - кнопки активации
		JButton buttonReset = new JButton("MC");
		buttonReset.addActionListener(new ActionListener() 
		{
			public void actionPerformed(ActionEvent ev) 
			{
				
				
				MemoryDisplay.setText("0");
				
				 if (memoryId == 1) 
				 {mem1 = 0;}
				 else
				 {
					 if (memoryId == 2) 
					 {mem2 = 0;}
					 else
					 {mem3 = 0;} 
				 }
				
		    }
		});
		Box hboxButtons = Box.createHorizontalBox();
		hboxButtons.add(Box.createHorizontalGlue());
		hboxButtons.add(buttonCalc);
		hboxButtons.add(Box.createHorizontalStrut(30));
		hboxButtons.add(button_Memory);
		hboxButtons.add(Box.createHorizontalStrut(30));
		hboxButtons.add(buttonReset);
		hboxButtons.add(Box.createHorizontalGlue());
		hboxButtons.setBorder(BorderFactory.createLineBorder(Color.GREEN));
		
		
		
		
		
		// Связать все 4 части воедино
		Box contentBox = Box.createVerticalBox();
		contentBox.add(Box.createVerticalGlue());
		contentBox.add(hboxFormulaDisplay);
		contentBox.add(hboxFormulaType);
		contentBox.add(hboxVariables);
		contentBox.add(hboxMemory);
		contentBox.add(hboxButtons);
		contentBox.add(hboxResult);
		contentBox.add(Box.createVerticalGlue());
		getContentPane().add(contentBox, BorderLayout.CENTER);
	}
	
	

}