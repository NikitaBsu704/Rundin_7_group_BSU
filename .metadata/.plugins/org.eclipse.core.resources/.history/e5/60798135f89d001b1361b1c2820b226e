package bsu.rfe.java.group7.lab7.Ryndin.var1;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.InetSocketAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.UnknownHostException;
import javax.swing.BorderFactory;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
@SuppressWarnings("serial")
public class MainFrame extends JFrame 
{
	private static final String FRAME_TITLE = "Клиент мгновенных сообщений";
	private static final int FRAME_MINIMUM_WIDTH = 500;
	private static final int FRAME_MINIMUM_HEIGHT = 500;
	private static final int FROM_FIELD_DEFAULT_COLUMNS = 10;
	private static final int TO_FIELD_DEFAULT_COLUMNS = 20;
	private static final int INCOMING_AREA_DEFAULT_ROWS = 10;
	private static final int OUTGOING_AREA_DEFAULT_ROWS = 5;
	private static final int SMALL_GAP = 5;
	private static final int MEDIUM_GAP = 10;
	private static final int LARGE_GAP = 15;
	InstantMessenger MessageClient;
	private JTextField textFieldIP;
	private JTextField textFieldPort;
	private JTextArea textAreaIncoming;
	private JTextArea textAreaOutgoing;
	public MainFrame() 
	{
		super(FRAME_TITLE);
		setMinimumSize(new Dimension(FRAME_MINIMUM_WIDTH, FRAME_MINIMUM_HEIGHT));
		// Центрирование окна
		final Toolkit kit = Toolkit.getDefaultToolkit();
		setLocation((kit.getScreenSize().width - getWidth()) / 2,(kit.getScreenSize().height - getHeight()) / 2);
		// Текстовая область для отображения полученных сообщений
		textAreaIncoming = new JTextArea(INCOMING_AREA_DEFAULT_ROWS, 0);
		textAreaIncoming.setEditable(false);
		// Контейнер, обеспечивающий прокрутку текстовой области
		final JScrollPane scrollPaneIncoming = new JScrollPane(textAreaIncoming);
		// Подписи полей
		final JLabel labelIP = new JLabel("Адрес");
		final JLabel labelPort = new JLabel("Порт");
		
		textFieldIP = new JTextField(FROM_FIELD_DEFAULT_COLUMNS);
		textFieldPort = new JTextField(TO_FIELD_DEFAULT_COLUMNS);
		// Текстовая область для ввода сообщения
		textAreaOutgoing = new JTextArea(OUTGOING_AREA_DEFAULT_ROWS, 0);
		// Контейнер, обеспечивающий прокрутку текстовой области
		final JScrollPane scrollPaneOutgoing = new JScrollPane(textAreaOutgoing);
		// Панель ввода сообщения
		final JPanel messagePanel = new JPanel();
		messagePanel.setBorder(BorderFactory.createTitledBorder("Сообщение"));
		// Кнопка отправки сообщения
		final JButton sendButton = new JButton("Отправить");
		sendButton.addActionListener(new ActionListener() 
		{
			@Override
			public void actionPerformed(ActionEvent e) 
			{
			sendMessage();
			}
		});
		// Компоновка элементов панели "Сообщение"
		final GroupLayout layout2 = new GroupLayout(messagePanel);
		messagePanel.setLayout(layout2);
		
		
		layout2.setHorizontalGroup(layout2.createSequentialGroup()
		.addContainerGap()
		.addGroup(layout2.createParallelGroup(Alignment.TRAILING)
		.addGroup(layout2.createSequentialGroup()
		.addComponent(labelIP)
		.addGap(SMALL_GAP)
		.addComponent(textFieldIP)
		.addGap(LARGE_GAP)
		.addComponent(labelPort)
		.addGap(SMALL_GAP)
		.addComponent(textFieldPort))
		.addComponent(scrollPaneOutgoing)
		.addComponent(sendButton))
		.addContainerGap());
		
		
		layout2.setVerticalGroup(layout2.createSequentialGroup().addContainerGap()
		.addGroup(layout2.createParallelGroup(Alignment.BASELINE)
		.addComponent(labelIP)
		.addComponent(textFieldIP)
		.addComponent(labelPort)
		.addComponent(textFieldPort))
		.addGap(MEDIUM_GAP)
		.addComponent(scrollPaneOutgoing)
		.addGap(MEDIUM_GAP)
		.addComponent(sendButton)
		.addContainerGap());
		// Компоновка элементов фрейма
		final GroupLayout layout1 = new GroupLayout(getContentPane());
		setLayout(layout1);
		
		
		layout1.setHorizontalGroup(layout1.createSequentialGroup()
		.addContainerGap()
		.addGroup(layout1.createParallelGroup()
		.addComponent(scrollPaneIncoming)
		.addComponent(messagePanel))
		.addContainerGap());
		
		
		layout1.setVerticalGroup(layout1.createSequentialGroup()
		.addContainerGap()
		.addComponent(scrollPaneIncoming)
		.addGap(MEDIUM_GAP)
		.addComponent(messagePanel)
		.addContainerGap());
		
		
		// Создание и запуск потока-обработчика запросов
		new Thread(new Runnable() 
		{
			@Override
			public void run() 
			{
				try 
				{
					final ServerSocket serverSocket = new ServerSocket(User_Port);
					while (!Thread.interrupted()) 
					{
						final Socket socket = serverSocket.accept();
						final DataInputStream in = new DataInputStream(socket.getInputStream());
						// Считываем данные отправителя
						final String address = ((InetSocketAddress) socket.getRemoteSocketAddress()).getAddress().getHostAddress();
						final String senderName = in.readUTF();
						final String senderSurName = in.readUTF();
						final String message = in.readUTF();
						// Закрываем соединение
						socket.close();
						// Выводим сообщение в текстовую область
						textAreaIncoming.append("IP: "+ address + "\n"+ "( "+senderName + "  |  " + senderSurName + " )" + "\n" + message + "\n");
					}
				} 
				catch (IOException e) 
				{
					e.printStackTrace();
					JOptionPane.showMessageDialog(MainFrame.this,"Ошибка в работе сервера", "Ошибка",JOptionPane.ERROR_MESSAGE);
				}
			}
		}).start();
		
	}
	
	
	
	
	JTextField Get_textFieldIP(){return textFieldIP;}
	JTextField Get_textFieldPort(){return textFieldPort;}
	JTextArea  Get_textAreaIncoming(){return textAreaIncoming;}
	JTextArea  Get_textAreaOutgoing(){return  textAreaOutgoing;}
	
	
	
	
	
	
	
	
	
	
	
	
}
